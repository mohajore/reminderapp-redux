{"version":3,"sources":["types.js","images/logo.png","Component/app.js","Actions/index.js","Reducers/index.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDER","App","state","text","date","Date","render_Reminders","reminders","props","className","map","remi","moment","fromNow","onClick","remove_Reminder","id","console","log","this","src","logo","onChange","e","setState","target","value","type","placeholder","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","add_Reminder","clear_Reminder","Component","connect","action","read_cookie","Math","random","bake_cookie","filter","reminder","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"sNAAaA,EAAc,eACdC,EAAiB,kBACjBC,EAAgB,iB,0CCFd,G,MAAA,IAA0B,kC,OCOnCC,E,4MAGFC,MAAM,CACFC,KAAK,GACLC,KAAM,IAAIC,M,EAGdC,iBAAmB,WACf,IAAOC,EAAY,EAAKC,MAAjBD,UACP,OACI,qBAAKE,UAAU,KAAf,SACMF,EAAUG,KAAK,SAAAC,GACb,OACI,qBAAkBF,UAAU,qCAA5B,UACI,gCAAME,EAAKR,KAAX,OACA,gCAAMS,IAAO,IAAIP,KAAKM,EAAKP,OAAOS,UAAlC,OACA,qBAAKJ,UAAU,qCAAqCK,QAAS,kBAAK,EAAKN,MAAMO,gBAAgBJ,EAAKK,KAAlG,iBAHKL,EAAKK,U,4CAWlC,WAAS,IAAD,OAEJ,OADAC,QAAQC,IAAIC,KAAKX,OAEb,sBAAKC,UAAU,MAAf,UACI,qBAAKW,IAAKC,IACV,qBAAKZ,UAAU,iBAAf,SACI,wDAGH,uBAAOa,SAAU,SAACC,GAAD,OAAM,EAAKC,SAAS,CAACrB,KAAKoB,EAAEE,OAAOC,SACnDC,KAAK,OAAOD,MAAOP,KAAKjB,MAAMC,KAAMyB,YAAY,uBAAuBnB,UAAU,wBAKlF,cAAC,IAAD,CACOA,UAAU,qBACViB,MAAOP,KAAKjB,MAAME,KAClByB,SAAUV,KAAKjB,MAAME,KACrBkB,SAAU,SAAClB,GAAD,OAAU,EAAKoB,SAAS,CAACpB,UACnC0B,gBAAc,EACdF,YAAY,aACZG,WAAW,QACXC,cAAe,GACfC,YAAY,OACZC,WAAW,yBACnB,wBAAQpB,QAAS,WACZ,EAAKN,MAAM2B,aAAa,EAAKjC,MAAMC,KAAK,EAAKD,MAAME,MAChD,EAAKoB,SAAS,CAACrB,KAAK,GAAGC,KAAK,MAE7BK,UAAU,6BAJjB,0BAKCU,KAAKb,mBACN,wBAAQQ,QAAS,kBAAK,EAAKN,MAAM4B,kBAChC3B,UAAU,iCADX,oC,GAzDE4B,aA4EHC,eAAQ,SAAApC,GACnB,MAAM,CACNK,UAAYL,KACb,CAACiC,aCpFuB,SAAChC,EAAKC,GAC7B,IAAMmC,EAAQ,CACVZ,KAAK7B,EACLK,OACAC,QAIJ,OADAa,QAAQC,IAAI,MAAMqB,GACXA,GD4EMxB,gBC1Ea,SAACC,GAC3B,IAAMuB,EAAQ,CACVZ,KAAK5B,EACLiB,MAGJ,OADAC,QAAQC,IAAI,SAASqB,GACdA,GDoEsBH,eClEJ,WACzB,IAAMG,EAAQ,CACVZ,KAAK3B,GAIT,OADAiB,QAAQC,IAAI,QAAQqB,GACbA,IDyDID,CAGoCrC,G,wBEvDpCM,EA7BG,WAAqB,IAApBL,EAAmB,uDAAb,GAAGqC,EAAU,uCAE9BhC,EAAY,GAIhB,OAFFL,EAAQsC,sBAAY,aAEdD,EAAOZ,OAAS7B,GAChBS,EAAS,sBAAOL,GAAP,CAAa,CAACC,KAAKoC,EAAOpC,KAAKC,KAAKmC,EAAOnC,KAAKY,GAAGyB,KAAKC,YACjEC,sBAAY,YAAYpC,GACxBU,QAAQC,IAAI,iBAAiBX,GACtBA,GACDgC,EAAOZ,OAAS5B,GACtBQ,EAAYL,EAAM0C,QAAO,SAAAC,GAAQ,OAAIA,EAAS7B,KAAOuB,EAAOvB,MAC5D2B,sBAAY,YAAYpC,GACxBU,QAAQC,IAAI,iBAAiBX,GACtBA,GACCgC,EAAOZ,OAAS3B,GACxBO,EAAW,GACXoC,sBAAY,YAAYpC,GACxBU,QAAQC,IAAI,iBAAiBX,GACtBA,GAKDL,GCnBR4C,G,cAASC,YAAYxC,IAG3ByC,IAASC,OACR,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACG,cAAC,EAAD,MACSI,SAASC,eAAe,W","file":"static/js/main.c96d0181.chunk.js","sourcesContent":["export const ADD_REMINDER= \"ADD_REMINDER\";\r\nexport const REMOVE_REMINDER= \"REMOVE_REMINDER\";\r\nexport const CLEAR_REMINDER= \"CLEAR_REMINDER\";","export default __webpack_public_path__ + \"static/media/logo.e56cbf37.png\";","import React,{Component} from 'react';\r\nimport { add_Reminder,remove_Reminder,clear_Reminder } from '../Actions';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport logo from \"../images/logo.png\"\r\nclass App extends Component {\r\n\r\n\r\n    state={\r\n        text:\"\",\r\n        date: new Date(),\r\n    }\r\n\r\n    render_Reminders = ()=>{\r\n        const {reminders}= this.props\r\n        return(\r\n            <div className='ul'>\r\n                { reminders.map( remi => {\r\n                    return (\r\n                        <li key={remi.id} className=\"list-group-item mt-2 mb-2 p-2  li \">\r\n                            <div>{remi.text} </div>\r\n                            <div>{moment(new Date(remi.date)).fromNow() } </div>\r\n                            <div className='remove btn btn-danger icon rounded' onClick={()=> this.props.remove_Reminder(remi.id)}>X</div>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props);\r\n        return(\r\n            <div className='app'>\r\n                <img src={logo}/>\r\n                <div className=\"reminder-title\">\r\n                    <h2>What Should You Do ?</h2>\r\n                </div>\r\n               \r\n                 <input onChange={(e)=> this.setState({text:e.target.value})}\r\n                  type='text' value={this.state.text} placeholder='Enter What You Think' className=\"form-control input \"/>\r\n                 {/* <input onChange={(e)=> this.setState({date:e.target.value})} \r\n                 type=\"datetime-local\" value={this.state.date} className=\"form-control\"\r\n                 /> */}\r\n                 \r\n                 <DatePicker\r\n                        className=\"form-control input\"\r\n                        value={this.state.date}\r\n                        selected={this.state.date}\r\n                        onChange={(date) => this.setState({date})}\r\n                        showTimeSelect\r\n                        placeholder=\"Enter Date\"\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={60}\r\n                        timeCaption=\"Time\"\r\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"/>\r\n                <button onClick={()=> \r\n                    {this.props.add_Reminder(this.state.text,this.state.date)\r\n                        this.setState({text:\"\",date:\"\"})\r\n                       \r\n                    }} className='btn btn-primary btn-block ' >Add Reminder</button>\r\n                {this.render_Reminders()}\r\n                <button onClick={()=> this.props.clear_Reminder()}\r\n                 className='btn btn-danger btn-block mb-2 ' >Clear Reminders</button>\r\n             \r\n               \r\n                \r\n            </div>\r\n        )\r\n    }\r\n  }\r\n    // function mapDispatchToProps(dispatch){\r\n    //     return { add_Reminder : ()=> dispatch(add_Reminder())\r\n    // }}\r\n\r\n    // function mapStateToProps(state) {\r\n    //     return{\r\n    //         reminders : state\r\n    //     }\r\n    // }\r\n\r\nexport default connect(state => {\r\n    return{\r\n    reminders : state\r\n}},{add_Reminder,remove_Reminder,clear_Reminder}) (App);","import { ADD_REMINDER,REMOVE_REMINDER,CLEAR_REMINDER } from \"../types\";\r\n\r\nexport const add_Reminder =(text,date) =>{\r\n    const action ={\r\n        type:ADD_REMINDER,\r\n        text,\r\n        date,\r\n\r\n    }\r\n    console.log(\"add\",action);\r\n    return action\r\n};\r\nexport const remove_Reminder =(id) =>{\r\n    const action ={\r\n        type:REMOVE_REMINDER,\r\n        id\r\n    }\r\n    console.log(\"remove\",action);\r\n    return action\r\n}\r\nexport const clear_Reminder =() =>{\r\n    const action ={\r\n        type:CLEAR_REMINDER,\r\n       \r\n    }\r\n    console.log(\"Clear\",action);\r\n    return action\r\n}\r\n\r\n","import { ADD_REMINDER,REMOVE_REMINDER,CLEAR_REMINDER } from \"../types\";\r\nimport { bake_cookie, read_cookie, delete_cookie } from 'sfcookies'\r\nconst reminders = (state=[],action) =>{\r\n  \r\n    let reminders = [];\r\n\r\n  state = read_cookie(\"reminders\")\r\n\r\n    if (action.type === ADD_REMINDER){\r\n        reminders = [...state,{text:action.text,date:action.date,id:Math.random()}]\r\n        bake_cookie(\"reminders\",reminders)\r\n        console.log(\" from reducers\",reminders);\r\n        return reminders\r\n    }else if (action.type === REMOVE_REMINDER) {\r\n        reminders = state.filter(reminder => reminder.id !== action.id)\r\n        bake_cookie(\"reminders\",reminders)\r\n        console.log(\" from reducers\",reminders);\r\n        return reminders \r\n      }else if (action.type === CLEAR_REMINDER) {\r\n        reminders =[]\r\n        bake_cookie(\"reminders\",reminders)\r\n        console.log(\" from reducers\",reminders);\r\n        return reminders \r\n      }\r\n    \r\n    \r\n    else {\r\n      return  state\r\n    }\r\n}\r\n\r\nexport default reminders;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Component/app'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reminders from './Reducers';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\nconst store  = createStore(reminders)\n\n\nReactDOM.render(\n <Provider store={store}>\n    <App/>\n </Provider>,document.getElementById(\"root\")\n)"],"sourceRoot":""}